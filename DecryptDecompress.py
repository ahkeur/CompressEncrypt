from Crypto.Cipher import AES # type: ignore
from Crypto.Util import Counter # type: ignore
from base64 import b64decode
import hashlib
import zstandard as zstd # type: ignore

ciphertext = b64decode("Zhi0Spt5/T6V7Wb2X4cI6FkFhEwQjIjNNpt4s3Z3Ydw2z4yzp0xw0B2MoUt/jb6WNsXGj09fL82Hvnxe6f5F6HXsYwiQudFlxo7Oo1WHOfcHaMCRQGEVlxcyhgKwuwE1z4+MdR6ctUnPjmSOZqSWj00+b6YiJACb9iSDiWpN0SzqZHOc7uBzGMGymqK+RZJMOoL3q0Npt8IdCJNz1py0+a4jFdZDp7tDPxEIdwTjVh0nUhpdoXtgs8ZyhSmpQxDhJhEfLQGbt/2AWveflAakTGuWPCqBwQ+9NGJ5v1/JzEnrWWT/3a5ayWptG5CkGHEJOa7bgyO3kOzOBu6KtQHrmsGaZDdKQxxfFip6SYVikG7WE0yNooQhfacAY3b02jGqXP/rz5WSGyO58W6ei/g/frebSFZaC6Krtku+hbsXs0uvWf6XQ92GJSyCnL5b/VaRSW2as0IyIwTPGAZyFOoVZcWSO77uSxkWRDYBsNzOKTtUCR8h8mykOLDwQUlk/tVZNal+9isSAkyF4SJ5CaPdW5iTH4fqF75tycSUzIKJpdOKjG8lTjmN6n1VMRgBer7i3K8hz7aVVqzRhcQiBP00+k/ggX0bN/ut23qogBCJwk/92BYvpOmcsHrXvxXayArgn8QG5vD88Ia3/zJX642aYIi1iG3KWa7tOmCNvikaUAkXb31P6NLIkPrzEVfvToYuv1fOUUEyk8KX6So7IPMS6tpw58g5RQa4nxoR4ySCJKEHrUzW5mAuCrxmEVIGGVky7IZKFZi4J//14ydXFEzSGdGmZ1qleJg/7lLivcfZFdezXYjWqInwWp0YICqV3WgUhlR08+4RuU80+x1V9ciKTDxkECvREKNTKFKcaE6RlCL18On9aiJ0wjNLz4IVOSOk1Hmawoh/vFF0ChecjqRKNkyNJsLlo6PKspARrSB15yXOZ7BoLMaEngLFX2pKAlgjzxk6BUYAFmJ5KlZ1M63mJg/ZUGNGWufQnCvsWrwrTFd0/5084piGv5nExyQBjqyggAOaxpvlsGCv85djUnk9LRfyJN74uxRWfTaP+lVt5cKaX+sQK3bsIH926+E7ngmNUR/icbJTO0iGqtZBuA8BVyOFvo

key = b64decode("uccykUjDcjeI8wLE0rQH3AuB67+OqHOb4AtfXJ866V4=")
iv = b64decode("CD+IzCKCBsR/h7CPDMGJUQ==")

# Create a counter object from the IV
ctr = Counter.new(128, initial_value=int.from_bytes(iv, byteorder='big'))

# Create the AES cipher object in CTR mode
cipher = AES.new(key, AES.MODE_CTR, counter=ctr)

# Decrypt the ciphertext
decrypted_data = cipher.decrypt(ciphertext)

try:
    dctx = zstd.ZstdDecompressor()
    decompressed = dctx.decompress(decrypted_data)
    print(decompressed.decode())
except Exception as e:
    print(f"ZLIB decompression failed: {e}")